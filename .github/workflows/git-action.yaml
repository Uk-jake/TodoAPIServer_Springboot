# 워크플로우 이름 정의
name: spring-app

# 워크플로우 트리거 설정
# on : 해당 플로우가 언제 실행되는지 정의
# main 브랜치로 push할 때와 main 브랜치로 pull request할 때 실행
on:
  # main 브랜치로 push할 때 트리거
  push:
    branches: [ "main" ]
  # main 브랜치로 pull request할 때 트리거
  pull_request:
    branches: [ "main" ]

# 필요한 권한 설정
permissions:
  id-token: write  # ID 토큰에 쓰기 권한을 부여 (AWS 역할 사용을 위해 필요)
  contents: read   # 코드 저장소의 내용을 읽을 권한 부여

# 전역 환경 변수 설정 (워크플로우 전체에서 사용할 환경 변수)
env:
  AWS_REGION: ap-northeast-2  # AWS 리전 설정

  ECS_SERVICE: todo-app-service-01  # ECS 서비스 이름
  ECS_CLUSTER: todo-app-cluster-01  # ECS 클러스터 이름
  ECS_TASK_DEFINITION: ./task-definition.json  # 태스크 정의 파일 경로

jobs:
  # Docker 이미지를 빌드하고 푸시하는 작업 정의
  build-docker-image:
    # 작업을 수행할 환경 설정 (ubuntu 최신 버전 사용)
    runs-on: ubuntu-latest

    steps:
      # 소스 코드 가져오기
      - uses: actions/checkout@v3  # 현재 리포지토리의 코드를 가져옴

      # JDK 설치 단계
      - name: Set up JDK 17
        uses: actions/setup-java@v3  # JDK 설정을 위한 액션 사용
        with:
          java-version: '17'        # 사용할 Java 버전 (JDK 17)
          distribution: 'temurin'   # 사용할 JDK 배포판 (Temurin)

      # Java Build 단계 (Gradle 사용)
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1  # Gradle 빌드를 위한 액션 사용
        with:
          arguments: clean bootJar  # Gradle을 사용하여 프로젝트 클린 후 bootJar 생성

      # Docker 이미지 빌드 및 Private Registry 푸시
      - name: build and release to Private Registry
        env:
         NAME: ${{secrets.REGISTRY_DOMAIN}}  # GitHub Secrets에서 가져온 DockerHub 사용자 이름 설정
         REPO: todo  # Docker 이미지의 이름(리포지토리) 설정
        run: |
          docker build -t $REPO .
          docker tag $REPO:latest $NAME/$REPO:latest
          docker push $NAME/$REPO:latest

      # AWS Credential Login
      - name: AWS ECR Credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::058264293778:role/awsLogin_githubAction
          role-session-name: sampleSessionName
          aws-region: ap-northeast-2

      # 새로운 이미지 ID를 사용해 Amazon ECS 태스크 정의를 업데이트
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}  # 업데이트할 태스크 정의 파일
          container-name: todo  # 업데이트할 컨테이너 이름 (빌드한 이미지가 포함된 컨테이너 이름과 일치해야 함)
          image: ${{ secrets.REGISTRY_DOMAIN }}/todo:latest  # 새로 빌드된 이미지의 ID. Private Registry의 도메인명과 이미지를 사용함.

      # Amazon ECS 서비스 배포
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}  # 업데이트된 태스크 정의
          service: ${{ env.ECS_SERVICE }}  # ECS 서비스 이름
          cluster: ${{ env.ECS_CLUSTER }}  # ECS 클러스터 이름
          wait-for-service-stability: true  # 서비스가 안정될 때까지 대기
