# 워크플로우 이름 정의
name: spring-app

# 워크플로우 트리거 설정
# on : 해당 플로우가 언제 실행되는지 정의
# main 브랜치로 push할 때와 main 브랜치로 pull request할 때 실행
on:
  # main 브랜치로 push할 때 트리거
  push:
    branches: [ "main" ]
  # main 브랜치로 pull request할 때 트리거
  pull_request:
    branches: [ "main" ]

# 필요한 권한 설정
permissions:
  id-token: write  # ID 토큰에 쓰기 권한을 부여 (AWS 역할 사용을 위해 필요)
  contents: read   # 코드 저장소의 내용을 읽을 권한 부여

jobs:
  # Docker 이미지를 빌드하고 푸시하는 작업 정의
  build-docker-image:
    # 작업을 수행할 환경 설정 (ubuntu 최신 버전 사용)
    runs-on: ubuntu-latest

    steps:
      # 소스 코드 가져오기
      - uses: actions/checkout@v3  # 현재 리포지토리의 코드를 가져옴

      # JDK 설치 단계
      - name: Set up JDK 17
        uses: actions/setup-java@v3  # JDK 설정을 위한 액션 사용
        with:
          java-version: '17'        # 사용할 Java 버전 (JDK 17)
          distribution: 'temurin'   # 사용할 JDK 배포판 (Temurin)

      # Java Build 단계 (Gradle 사용)
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1  # Gradle 빌드를 위한 액션 사용
        with:
          arguments: clean bootJar  # Gradle을 사용하여 프로젝트 클린 후 bootJar 생성

      # DockerHub 로그인 단계
#      - name: Login to DockerHub
#        uses: docker/login-action@v1  # DockerHub 로그인 액션 사용
#        with:
#          username: ${{secrets.DOCKERHUB_USERNAME}}  # GitHub Secrets에 저장된 DockerHub 사용자 이름 사용
#          password: ${{secrets.DOCKERHUB_TOKEN}}  # GitHub Secrets에 저장된 DockerHub 비밀번호(토큰) 사용

      # Docker 이미지 빌드 및 DockerHub로 푸시
      - name: build and release to DockerHub
        env:
         NAME: ${{secrets.DOCKERHUB_USERNAME}}  # GitHub Secrets에서 가져온 DockerHub 사용자 이름 설정
         REPO: todo-app  # Docker 이미지의 이름(리포지토리) 설정
        run: |
          echo '{ "insecure-registries": ["13.209.68.92"] }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker
          docker build -t $REPO .
          docker tag $REPO:latest $NAME/$REPO:latest
          docker push $NAME/$REPO:latest